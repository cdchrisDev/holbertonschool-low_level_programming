!<arch>
//                                              226       `
10-print_triangle.c/
3-print_numbers.c/
4-print_most_numbers.c/
5-more_numbers.c/
5-string_toupper.c/
6-my_cap_string.c/
7-My_print_chessboard.c/
7-print_chessboard.c/
7-print_diagonal.c/
8-print_diagsums.c/
8-print_square.c/
0-isupper.c/    0           0     0     644     297       `
#include "main.h"
/**
 * _isupper - 2th called to func
 * a program to check for uppercase letter
 * @c: a char int
 * Return: a char int
 */

int _isupper(int c)
{
	if (c >= 97 && c <= 122)
	{
		return (0);
	}
	else if (c >= 65 && c <= 90)
	{
		return (1);
	}
	else
		return (0);

	return (c);
}

0-main.c/       0           0     0     644     947       `
#include "main.h"
#include <stdio.h>

/**
 * simple_print_buffer - prints buffer in hexa
 * @buffer: the address of memory to print
 * @size: the size of the memory to print
 *
 * Return: Nothing.
 */
void simple_print_buffer(char *buffer, unsigned int size)
{
        unsigned int i;

        i = 0;
        while (i < size)
        {
                if (i % 10)
                {
                        printf(" ");
                }
                if (!(i % 10) && i)
                {
                        printf("\n");
                }
                printf("0x%02x", buffer[i]);
                i++;
        }
        printf("\n");
}

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char buffer[98] = {0x00};

    simple_print_buffer(buffer, 98);
    _memset(buffer, 0x01, 95);
    printf("-------------------------------------------------\n");
    simple_print_buffer(buffer, 98);    
    return (0);
}

0-memset.c/     0           0     0     644     291       `
#include "main.h"
/**
 * _memset - fills memory with constant byte
 * @s: buffer
 * @b: constant bytes
 * @n: num of bytes
 * Return: pointer to memory area s;
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i = 0;

	while (i != n)
	{
		s[i] = b;
		i++;
	}
	return (s);
}

0-reset_to_98.c/0           0     0     644     182       `
#include "main.h"
/**
 * reset_to_98 - prototype func
 * a function to reset a 'n' to 98
 * @n: number to update
 * Return: updated number
 */
void reset_to_98(int *n)
{
	*n = 98;
}
0-strcat.c/     0           0     0     644     364       `
#include "main.h"
/**
 * _strcat - a func that concatenates two strings
 * @dest: string concatenated
 * @src: string to concatenate
 * Return: pointer to dest
 */

char *_strcat(char *dest, char *src)
{
	int i, j;

	i = 0;
	j = 0;

	while (dest[i] != '\0')
		i++;


	for (; src[j] != '\0'; j++, i++)
	{
		dest[i] = src[j];
	}
	dest[i] = '\0';

	return (dest);

}
100-atoi.c/     0           0     0     644     339       `
#include "main.h"
/**
 * _atoi -a func to convert a string to int
 * @s: a char
 * Return: 0
 */
int _atoi(char *s)
{
	int sign = 1;
	unsigned int num = 0;

	do {
		if (*s == '-')
			sign *= -1;

		else if (*s >= '0' && *s <= '9')
			num = (num * 10) + (*s - '0');

		else if (num > 0)
			break;

	} while (*s++);

	return (num * sign);
}

100-atoi_my.c/  0           0     0     644     395       `
/*      int sign;
        unsigned int val;

        val = 0;
        sign = 1;

        while (*s++ != '\0')
        {
                if (*s == '-')
                        sign *= -1;

                if (*s >= '0' && *s <= '9')
                        val = (val * 10) + (*s - '0');

                else if (val > 0)
                        break;
        }
        return (sign * val);
*/

100-main.c/     0           0     0     644     683       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    int nb;

    nb = _atoi("98");
    printf("%d\n", nb);
    nb = _atoi("-402");
    printf("%d\n", nb);
    nb = _atoi("          ------++++++-----+++++--98");
    printf("%d\n", nb);
    nb = _atoi("214748364");
    printf("%d\n", nb);
    nb = _atoi("0");
    printf("%d\n", nb);
    nb = _atoi("Suite 402");
    printf("%d\n", nb);
    nb = _atoi("         +      +    -    -98 Battery Street; San Francisco, CA 94111 - USA             ");
    printf("%d\n", nb);
    nb = _atoi("---++++ -++ Sui - te -   402 #cisfun :)");
    printf("%d\n", nb);
    return (0);
}

10-main.c/      0           0     0     644     239       `
#include "main.h"

/**
 *  * main - check the code
 *   *
 *    * Return: Always 0.
 *     */
int main(void)
{
	    print_triangle(2);
	        print_triangle(10);
		    print_triangle(1);
		        print_triangle(0);
			    return (0);
}

/0              0           0     0     644     385       `
#include "main.h"
/**
 * print_triangle - a func to print triangles by giving a num
 * @size: where is the num of triangle size
 * Return: tri
 */
void print_triangle(int size)
{
	int j, i, jj;

	if (size <= 0)
		_putchar('\n');

	for (j = 1; j <= size; j++)
	{
		for (jj = size - j; jj > 0; jj--)
			_putchar(' ');
		for (i = 1; i <= j; i++)
			_putchar('#');

		_putchar('\n');
	}
}

1-isdigit.c/    0           0     0     644     230       `
#include "main.h"
/**
 * _isdigit - 2th func called
 * a program to check for ints
 * @c: a int
 * Return: 1 if digit, 0 if not
 */
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
		return (1);

	else
		return (0);

	return (c);
}
1-main.c/       0           0     0     644     912       `
#include "main.h"
#include <stdio.h>

/**
 * simple_print_buffer - prints buffer in hexa
 * @buffer: the address of memory to print
 * @size: the size of the memory to print
 *
 * Return: Nothing.
 */
void simple_print_buffer(char *buffer, unsigned int size)
{
    unsigned int i;

    i = 0;
    while (i < size)
    {
        if (i % 10)
        {
            printf(" ");
        }
        if (!(i % 10) && i)
        {
            printf("\n");
        }
        printf("0x%02x", buffer[i]);
        i++;
    }
    printf("\n");
}

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char buffer[98] = {0};
    char buffer2[98] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14};

    simple_print_buffer(buffer, 98);
    _memcpy(buffer + 50, buffer2, 10);
    printf("-------------------------------------------------\n");
    simple_print_buffer(buffer, 98);    
    return (0);
}
1-memcpy.c/     0           0     0     644     317       `
#include "main.h"
/**
 * *_memcpy - a func to copy memory area
 * @dest: where to copy to
 * @src: where to copy from
 * @n: num of n
 * Return: the copy of src on dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i = 0;

	while (i != n)
	{
		dest[i] = src[i];
		i++;
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     460       `
#include "main.h"
/**
 * char *_strncat - a func at least n bytes
 * @dest: the string where will concatenate
 * @src: where it concatenate
 * @n: num of bytes to concatenate
 * Return: dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int i = 0, j = 0, k;

	while (dest[i] != '\0')
		i++;

	while (src[j] != '\0')
		j++;

	if (n < j)
		j = n - 1;

	k = 0;

	while (k <= j)
	{
		dest[i] = src[k];
		k++, i++;
	}

	dest[i + 1] = '\0';

	return (dest);
}
1-swap.c/       0           0     0     644     248       `
#include "main.h"
/**
 * swap_int - swaper for 2 ints
 * this program swap the position of 2 var
 * @a: num to swap
 * @b: num to swap
 * Return: the swapped nums
 */

void swap_int(int *a, int *b)
{
	int temp;

	temp = *a;
	*a = *b;
	*b = temp;
}
2-main.c/       0           0     0     644     251       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char *s = "hello";
    char *f;

    f = _strchr(s, 'l');

    if (f != NULL)
    {
        printf("%s\n", f);
    }
    return (0);
}

2-mul.c/        0           0     0     644     189       `
#include "main.h"
/**
 * mul - 2th called to func
 * a func to multiply two num
 * @a: den
 * @n: mul
 * Return: r = a * n;
 */
int mul(int a, int n)
{
	int r;

	r = a * n;

	return (r);
}

2-strchr.c/     0           0     0     644     277       `
#include "main.h"
/**
 * _strchr - a func to locate a char in a str
 * @s: a string
 * @c: char
 * Return: pointer to the occurrence of the character
 */
char *_strchr(char *s, char c)
{
	while (s++)
	{
		if (*s == c)
			return (s);
		if (!*s)
			return (0);
	}
	return (0);
}

2-strlen.c/     0           0     0     644     255       `
#include "main.h"
/**
 * _strlen - length of a string
 * a program to return the length of a string
 * @s: a character of a string
 * Return: the length of a string
 */
int _strlen(char *s)
{
	int c;

	for (c = 0; *s != '\0' ; s++)
		c++;

	return (c);
}

2-strncpy.c/    0           0     0     644     306       `
#include "main.h"
/**
 * _strncpy - strncpy replicated
 * @dest: string 1
 * @src: string 2
 * @n: num of bytes
 * Return: 0
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
		dest[i] = src[i];

	for (; i < n; i++)
		dest[i] = '\0';

	return (dest);
}
3-islower.c/    0           0     0     644     212       `
#include "main.h"
/**
 * _islower - 2th called func
 * A function to check for lowercase char
 * @c: a char
 * Return: 0
 */

int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
		return (1);

	else
		return (0);
}
3-main0.c/      0           0     0     644     293       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char s1[] = "Hello";
    char s2[] = "World!";

    printf("%d\n", _strcmp(s1, s2));
    printf("%d\n", _strcmp(s2, s1));
    printf("%d\n", _strcmp(s1, s1));
    return (0);
}

3-main.c/       0           0     0     644     249       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char *s = "hello, world";
    char *f = "oleh";
    unsigned int n;

    n = _strspn(s, f);
    printf("%u\n", n);
    return (0);
}

3-my_strspn.c/  0           0     0     644     404       `
#include "main.h"
/**
 * _strspn - a func to get the length of a prefix substring
 * @s: a string
 * @accept: bytes to get
 * Return: num of bytes on s by accept
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int i = 0, j = 0;

	while (s[i++] != '\0')
	{
		while (accept[j++] != '\0')
		{
			if (s[i] == accept[j])
			{
				break;
			}

			if (!(accept[j]))
				break;
		}
	}
	return (i);
}
/21             0           0     0     644     215       `
#include "main.h"
/**
 * print_numbers - print the numbers from 0 to 9
 * @void: no parameters
 * Return: 0
 */
void print_numbers(void)
{
	int n;

	for (n = 0; n <= 9; n++)
		_putchar(n + '0');

	_putchar('\n');
}

3-puts.c/       0           0     0     644     190       `
#include "main.h"
/**
 * _puts - print a str by '\n'
 * @str: a string
 * Return: a str
 */
void _puts(char *str)
{
	while (*str != '\0')
	{
		_putchar(*str);
		str++;
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     278       `
#include "main.h"
/**
 * _strcmp - compare two strings
 * @s1: string 1
 * @s2: string 2
 * Return: less, equal to or greater than 0
 */
int _strcmp(char *s1, char *s2)
{
	int i;

	for (i = 0; s1[i] == s2[i]; i++)
		if (s1[i] == '\0')
			return (0);

	return (s1[i] - s2[i]);
}
3-strspn.c/     0           0     0     644     463       `
#include "main.h"

/**
 * _strspn -  gets the length of a prefix substring
 *
 * @s: char pointer
 * @accept: char pointer
 *
 *
 * Return: s
 */

unsigned int _strspn(char *s, char *accept)
{

	unsigned int count1, count2;

	for (count1 = 0; s[count1] != '\0'; count1++)
	{
		for (count2 = 0; accept[count2] != '\0'; count2++)
		{
			if (s[count1] == accept[count2])
			{
				break;
			}
		}
			if (!(accept[count2]))
			{
				break;
			}
	}
	return (count1);
}

4-isalpha.c/    0           0     0     644     253       `
#include "main.h"
/**
 * _isalpha - 2th func called
 * a program to check for chars
 * @c: a char
 * Return: 1 or 0
 */
int _isalpha(int c)
{
	if (c >= 'a' && c <= 'z')
		return (1);

	else if (c >= 'A' && c <= 'Z')
		return (1);

	else
		return (0);
}

4-main2.c/      0           0     0     644     333       `
#include <stdio.h>

char *_strpbrk(char *, char *);

/**
 * main - check the code for Holberton School students.
 *
 * Return: Always 0.
 */
int main(void)
{
	char *s = "First, solve the problem. Then, write the code.";
	char *f = "Holberton";
	char *t;

	t = _strpbrk(s, f);
	printf("%s\n", (t == NULL ? "nil" : t));
	return (0);
}

4-main.c/       0           0     0     644     350       `
#include <stdlib.h>
#include <stdio.h>

char *_strpbrk(char *, char *);

/**
 * main - check the code for Holberton School students.
 *
 * Return: Always 0.
 */
int main(void)
{
	char *s = "First, solve the problem. Then, write the code.";
	char *f = "[]{}()";
	char *t;

	t = _strpbrk(s, f);
	printf("%s\n", (t == NULL ? "nil" : t));
	return (0);
}
/40             0           0     0     644     249       `
#include "main.h"
/**
 * print_most_numbers - print most numbers except 2 and 4
 * Return: 0
 */
void print_most_numbers(void)
{
	int n;

	for (n = 0; n <= 9; n++)
	{
		if (n == 2 || n == 4)
			continue;

		_putchar(n + '0');

	}
	_putchar('\n');
}

4-print_rev.c/  0           0     0     644     295       `
#include "main.h"
/**
 * print_rev - print in reverse
 * A simple program to print in reverse
 * @s: character
 * Return: a reversed string
 */
void print_rev(char *s)
{
	int i;

	for (i = 0; *s != '\0'; s++)
		i++;

	s--;

	while (i != 0)
	{
		_putchar(*s);
		i--;
		s--;
	}
	_putchar('\n');
}

4-rev_array.c/  0           0     0     644     307       `
#include "main.h"
/**
 * reverse_array - a func to reverse the content of an array
 * @a: an int
 * @n: a num of elements in the array
 * Return: a reversed array
 */
void reverse_array(int *a, int n)
{
	int i, cap = a[0];

	for (i = 0; i < n; i++)
	{
		n--;
		cap = a[i];
		a[i] = a[n];
		a[n] = cap;
	}
}

4-strpbrk.c/    0           0     0     644     393       `
#include <stdlib.h>
#include "main.h"
/**
 * _strpbrk - a func to look for bytes *accept on string *s
 * @s: a string
 * @accept: bytes to look for
 * Return: the occurrencenses
 */
char *_strpbrk(char *s, char *accept)
{

	int i = 0;

	while (s[i] != '\0')
	{
		int j = 0;

		while (accept[j] != '\0')
		{
			if (s[i] == accept[j])
				return (&s[i]);
			j++;
		}
		i++;
	}
	return (NULL);
}

5-main1.c/      0           0     0     644     292       `
#include <stdio.h>

char *string_toupper(char *);

/**
 * main - check the code for Holberton School students.
 *
 * Return: Always 0.
 */
int main(void)
{
	char s[] = "Talk is cheap. Show me the code.\n";
	char *p;

	p = string_toupper(s);
	printf("%s", p);
	printf("%s", s);
	return (0);
}
5-main2.c/      0           0     0     644     267       `
#include <stdio.h>

char *string_toupper(char *);

/**
 * main - check the code for Holberton School students.
 *
 * Return: Always 0.
 */
int main(void)
{
	char s[] = "Hello";
	char *p;

	p = string_toupper(s);
	printf("%s\n", p);
	printf("%s\n", s);
	return (0);
}

5-main.c/       0           0     0     644     351       `
#include <stdlib.h>
#include <stdio.h>

char *_strstr(char *, char *);

/**
 * main - check the code for Holberton School students.
 *
 * Return: Always 0.
 */
int main(void)
{
	char *s = "First, solve the problem. Then, write the code.";
	char *f = "Holberton";
	char *t;

	t = _strstr(s, f);
	printf("%s\n", (t == NULL ? "nil" : t));
	return (0);
}

/64             0           0     0     644     298       `
#include "main.h"
/**
 * more_numbers - print the numbers from 0 to 14 x10.
 * Return: 0
 */
void more_numbers(void)
{
	int j, i;

	for (j = 0; j < 10; j++)
	{
		for (i = 0; i <= 14; i++)
		{
			if (i > 9)
			{
				_putchar(i / 10 + '0');
			}
			_putchar(i % 10 + '0');
		}
		_putchar('\n');
	}
}
5-My_strstr.c/  0           0     0     644     501       `
#include <stdlib.h>
#include "main.h"
/**
 * _strstr - a func that locates a substring
 * @haystack: a string to look for
 * @needle: what to look for
 * Return: located substring
 */
char *_strstr(char *haystack, char *needle)
{
	int i = 0;

	while (haystack[i] != '\0')
	{
		int j = 0;

		while (needle[j] != '\0')
		{
			if ((haystack[i] == needle[j]) &&
			(haystack[i + 1] == needle[j + 1] || haystack[i - 1] == needle[j - 1]))
				return (&haystack[i]);

			j++;
		}
		i++;
	}
	return (NULL);
}

5-rev_string.c/ 0           0     0     644     338       `
#include "main.h"
/**
 * rev_string - reverse a string
 * a simple program return a reversed a string
 * @s: character
 * Return: a reversed string
 */
void rev_string(char *s)
{
	char cap = s[0];
	int i;
	int fc = 0;

	while (s[fc] != '\0')
		fc++;

	for (i = 0; i < fc; i++)
	{
		fc--;
		cap = s[i];
		s[i] = s[fc];
		s[fc] = cap;
	}
}
/82             0           0     0     644     254       `
#include "main.h"
/**
 * string_toupper - convert lower to uppercase
 * @c: a char
 * Return: uppercase letter
 */
char *string_toupper(char *c)
{
	int i = 0;

	while (c[i++] != '\0')
	{
		if (c[i] >= 'a' && c[i] <= 'z')
			c[i] -= 32;
	}
	return (c);
}
5-strstr.c/     0           0     0     644     448       `
#include <stdlib.h>
#include "main.h"
/**
 * _strstr - a func that locates a substring
 * @haystack: a string to look for
 * @needle: what to look for
 * Return: located substring
 */
char *_strstr(char *haystack, char *needle)
{
	int i = 0;

	while (haystack[i])
	{
		int j = 0;

		while (needle[j])
		{
			if (haystack[i + j] != needle[j])
				break;

			j++;
		}

		if (needle[j] == '\0')
			return (haystack + i);

		i++;
	}
	return (NULL);
}

6-abs.c/        0           0     0     644     204       `
#include "main.h"
/**
 * _abs - 2th func called
 * print the absolute value of a int
 * @n: a int
 * Return: 0 or -1
 */
int _abs(int n)
{
	if (n < 0)
	{
		return (n * -1);
	}
	else
	{
		return (n);
	}
}
6-cap_string.c/ 0           0     0     644     403       `
#include "main.h"
/**
  * cap_string - ...
  * @s: ...
  *
  * Return: char value
  */
char *cap_string(char *s)
{
	int a = 0, i;
	int cspc = 13;
	char spc[] = {32, '\t', '\n', 44, ';', 46, '!', '?', '"', '(', ')', '{', '}'};

	while (s[a])
	{
		i = 0;

		while (i < cspc)
		{
			if ((a == 0 || s[a - 1] == spc[i]) && (s[a] >= 97 && s[a] <= 122))
				s[a] -= 32;

			i++;
		}

		a++;
	}

	return (s);
}

6-main.c/       0           0     0     644     377       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char str[] = "Expect the best. Prepare for the worst. Capitalize on what comes.\nhello world! hello-world 0123456hello world\thello world.hello world\n";
    char *ptr;

    ptr = cap_string(str);
    printf("%s", ptr);
    printf("%s", str);
    return (0);
}

/102            0           0     0     644     391       `
#include "main.h"
/**
 * cap_string - a func to capitalizes all words of a string
 * @c: a char
 * Return: a string cap
 */
char *cap_string(char *c)
{
	int i = 0;

	while (c[i++] != '\0')
	{
		if (c[i] == ' ' || c[i] == '\n' || c[i] == '\t')
		{
			i++;

			if (c[i] >= 'A' && c[i] <= 'Z')
				continue;
			else if (c[i] == '0')
				continue;
			else
				c[i] -= 32;

		}
	}
	return (c);
}

6-print_line.c/ 0           0     0     644     190       `
#include "main.h"
/**
 * print_line - write a straight line
 * @n: a int
 * Return: a drew line
 */
void print_line(int n)
{
	while (n > 0)
	{
		_putchar('_');
		n--;
	}

	_putchar('\n');
}
6-puts2.c/      0           0     0     644     316       `
#include "main.h"
/**
 * puts2 - func half char
 * a program to print every other character of a string.
 * @str: a character sequence
 * Return: half'ed string
 */

void puts2(char *str)
{
	int i;

	i = 0;

	while (*str != '\0')
	{
		if (i % 2 == 0)
		{
			_putchar(*str);
		}
		str++;
		i++;
	}
	_putchar('\n');
}
7-leet.c/       0           0     0     644     415       `
#include "main.h"

/**
  * leet - Encodes a string into 1337
  * @s: The string to encode
  *
  * Return: The encoded string
  */
char *leet(char *s)
{
	int a = 0, b = 0, l = 5;
	char r[5] = {'A', 'E', 'O', 'T', 'L'};
	char n[5] = {'4', '3', '0', '7', '1'};

	while (s[a])
	{
		b = 0;

		while (b < l)
		{
			if (s[a] == r[b] || s[a] - 32 == r[b])
			{
				s[a] = n[b];
			}

			b++;
		}

		a++;
	}

	return (s);
}

7-main.c/       0           0     0     644     591       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char board[8][8] = {
        {'r', 'k', 'b', 'q', 'k', 'b', 'k', 'r'},
        {'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
        {'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'},
        {'R', 'K', 'B', 'Q', 'K', 'B', 'K', 'R'},
    };
    print_chessboard(board);
    return (0);
}

/121            0           0     0     644     347       `
#include "main.h"
#include <stdlib.h>
/**
 * print_chessboard - a func to print a chessboard
 * @a[8]: a char
 * Return: print a chessboard
 */
void print_chessboard(char (*a)[8])
{
	int i = 0, j = 0;

	for (; *a[i] != '\0'; i++)
	{
		for (; *a[j] != '\0'; j++)
		{
			if (j == '\0')
				_putchar('\n');
			else
				_putchar(a);
		}
		j = 0;
	}
}

/146            0           0     0     644     288       `
#include "main.h"
/**
 * print_chessboard - a func to print the chessboard
 * @a: a chess piece
 * Return: the cheesboard
 */
void print_chessboard(char (*a)[8])
{
	int i = 0;

	for (; i < 8; i++)
	{
		int j = 0;

		for (; j < 8; j++)
		{
			_putchar(a[i][j]);
		}
		_putchar('\n');
	}
}
/168            0           0     0     644     367       `
#include "main.h"
/**
 * print_diagonal - print a diagonal line on the terminal
 * @n: a int
 * Return: void
 */
void print_diagonal(int n)
{
	int j, i;

	if (n <= 0)
		_putchar('\n');


	for (i = 0; i < n; i++)
	{
		for (j = 0; j < n; j++)
		{
			if (i == j)
			{
				_putchar('\\');
				_putchar('\n');
				break;
			}
			else
			{
				_putchar(' ');
			}
		}
	}
}

7-puts_half.c/  0           0     0     644     404       `
#include "main.h"
/**
 * puts_half - a program to cut a string in half
 * a simple program to print a string in half
 * @str: a string
 * Return a halfed string
 */
void puts_half(char *str)
{
	int n, c, len;

	len = 0;

	for (n = 0; *(str + n) != '\0'; n++)
		len++;


	c = len / 2;

	if ((len % 2) == 1)
		c = ((len + 1) / 2);

	for (n = c; str[n] != '\0'; n++)
		_putchar(str[n]);

	_putchar('\n');
}
8-main.c/       0           0     0     644     533       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    int c3[3][3] = {
        {0, 1, 5},
        {10, 11, 12},
        {1000, 101, 102},
    };
    int c5[5][5] = {
        {0, 1, 5, 12124, 1234},
        {10, 11, 12, 123521, 12512},
        {1000, 101, 102, 12545, 214543435},
        {100, 1012451, 11102, 12545, 214543435},
        {10, 12401, 10452, 11542545, 1214543435},
    };
    print_diagsums((int *)c3, 3);
    print_diagsums((int *)c5, 5);
    return (0);
}

8-print_array.c/0           0     0     644     313       `
#include <stdio.h>
#include "main.h"
/**
 * print_array - a simple program to print and array of ints
 * @a: int
 * @n: int
 * Return: void
 */
void print_array(int *a, int n)
{
	int i = 0;

	while (i < n - 1)
	{
		printf("%d, ", a[i]);
		i++;

		if (i == (n - 1))
			printf("%d", a[n - 1]);
	}
	printf("\n");

}

/188            0           0     0     644     445       `
#include <stdlib.h>
#include <stdio.h>
#include "main.h"
/**
 * print_diagsums - a func that prints the sum of two diagonals of a
 * squeare matrix of integers
 * @a: a num
 * @size: the size
 * Return: 0
 */
void print_diagsums(int *a, int size)
{
	int i, sum = 0, sum1 = 0;

	for (i = 0; i < size; i++)
	{
		sum +=  a[i * (size + 1)];
	}

	for (i = 0; i < size; i++)
	{
		sum1 += a[(size - 1) * (i + 1)];
	}

	printf("%d, %d\n", sum, sum1);
}

/208            0           0     0     644     316       `
#include "main.h"
/**
 * print_square -  a func to print a square
 * @size: a square
 * Return: a square
 *
 */
void print_square(int size)
{
	int i, j;

	if (size <= 0)
		_putchar('\n');

	for (i = 0; i < size; i++)
	{
		for (j = 0; j < size; j++)
		{
			if (size > 0)
				_putchar('#');
		}
		_putchar('\n');
	}
}
9-fizz_buzz.c/  0           0     0     644     449       `
#include <stdio.h>
/**
 * main - entry point
 * a program to print FizzBuzz depending its multiply
 * Return: 0
 */

int main(void)
{
	int i;

	for (i = 1; i <= 100; i++)
	{
		if (i % 3 == 0)
		{
			if (i % 15 == 0)
				printf("FizzBuzz ");
			else
				printf("Fizz ");
		}

		else if (i % 5 == 0)
		{
			if (i == 100)
			{
				printf("Buzz");
				putchar('\n');
			}
			else
				printf("Buzz ");
		}
		else
			printf("%d ", i);

	}

	return (0);
}

9-main.c/       0           0     0     644     283       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    char s1[98];
    char *ptr;

    ptr = _strcpy(s1, "First, solve the problem. Then, write the code\n");
    printf("%s", s1);
    printf("%s", ptr);
    return (0);
}

9-strcpy.c/     0           0     0     644     264       `
#include "main.h"
/**
 * _strcpy - a func to print copy a string
 * @dest: where it is copied
 * @src: where it copys
 * Return: dest
 */
char *_strcpy(char *dest, char *src)
{
	int i;

	i = 0;

	while ((dest[i] = src[i]) != '\0')
		i++;

	return (dest + '\0');
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

